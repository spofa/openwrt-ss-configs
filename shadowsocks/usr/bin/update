#!/bin/sh
LOG="/var/log/update.log"

current_dir=`echo $PWD`
tar_dir="/etc/"

remoteBaseDir="https://raw.githubusercontent.com/gnu4cn/openwrt-ss-configs/master/"
remoteDir=$remoteBaseDir"shadowsocks"
time="echo $(date +'%F %H:%M:%S')"

dnsmasqReload=0
shadowsocksReload=0
fileListChanged=0
TRIES=4
currentDir=$PWD

servers="/etc/servers.conf"

# change wireless option
wireless () {
    wl_reload=0

    if [ "`/sbin/uci get wireless.@wifi-device[0].channel`" != "auto" ]; then
        /sbin/uci set wireless.@wifi-device[0].channel=auto
        wl_reload=1
    fi;

    if [ "`/sbin/uci get wireless.@wifi-device[0].txpower`" != "29" ]; then
        /sbin/uci set wireless.@wifi-device[0].txpower=29
        wl_reload=1
    fi;

    if [ $wl_reload -eq 1 ]; then
        /sbin/uci commit wireless
        /sbin/wifi
    fi;
}

update_ss () {
    remote_ver="2.5.5-2"
    current_ver=`/bin/opkg status shadowsocks-libev|grep Version | awk '{printf $2}'`

    if [ "$current_ver" != "$remote_ver" ]; then
        remoteSS="shadowsocks-libev_"$remote_ver"_ar71xx.ipk"
        ss_URL=$remoteBaseDir$remoteSS
        tmpSS="/tmp/"$remoteSS

        count=0
        fetch_success=0

        until [ $fetch_success -eq 1 ] || [ $count -gt 4 ]
        do
            wget -4 --no-check-certificate -O $tmpSS $ss_URL

            if [ $? -eq 0 ]; then
                fetch_success=1
                /bin/opkg install $tmpSS
                shadowsocksReload=0
                /etc/init.d/shadowsocks reload
            fi;
            count=$((count+1))
        done;
    fi;
}

wan_mac_bind () {
    # get current WAN mac address
    wan_ifname=`/sbin/uci get network.wan.ifname`
    wan_macaddr=`/sbin/ifconfig|grep $wan_ifname|awk '{printf $5}'`

    if [ "$wan_macaddr" = "04:A1:51:8E:D1:0B" ]; then
        occupied=1

        until [ $occupied -eq 0 ]
        do
            NEWMAC=$(dd if=/dev/urandom bs=1024 count=1 2>/dev/null | md5sum | sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\)\(..\).*$/\1:\2:\3:\4:\5:\6/')
            request_answered=0
            until [ $request_answered=1 ]
            do
                result=$(/usr/bin/curl -s https://xfoss.com:8080/$NEWMAC)
                if [ $? -eq 0 ]; then
                    $request_answered=1
                fi;
            done;
            is_existed=`echo $result | awk '{split($0,a,":"); print a[2];}'`
            if [ "$is_existed" = "existed" ]; then
                :
            else
                occupied=0
                /sbin/uci set network.wan.macaddr=$NEWMAC
                /sbin/uci commit network
                /etc/init.d/network reload
            fi;
        done;
    fi;
}

install_pkgs () {
    pkgs_need="ipset wget gnupg curl ca-certificates"
   
    /bin/opkg list-installed > /tmp/pkgs_installed.tmp

    repo_updated=0

    for pkg in $pkgs_need
    do
        result=`/bin/cat /tmp/pkgs_installed.tmp | grep $pkg`        
        if test -z "$result"; then
            if [ $repo_updated -eq 0 ]; then
                /bin/opkg update
                repo_updated=1
            fi;
            /bin/opkg install $pkg
        fi;
    done;
}

# update scripts and configs
getRemoteFile () {
    get_file_tries=0
    file_fetched=0

    until [ $file_fetched -eq 1 ] || [ $get_file_tries -gt $TRIES ]
    do
        file="${1}"
        filename=`echo $file | awk '{sub(/.*\//,x)}'1`
        tmpFile="/tmp/"$filename".tmp"

        wget -4 --no-check-certificate -O $tmpFile $remoteDir$file

        if [ $? -eq 0 ]; then
            file_fetched=1

            mv $tmpFile $file

            case $2 in
                0) dnsmasqReload=1
                    ;;
                1) dnsmasqReload=1
                    cd $tar_dir
                    /bin/tar xfj $filename
                    cd $current_dir
                    ;;
                2) dnsmasqReload=1
                    ;;
                3) /etc/init.d/cron reload
                    ;;
                4) chmod +x $file
                    shadowsocksReload=1
                    ;;
                5) chmod +x $file
                    shadowsocksReload=1
                    ;;
                6) shadowsocksReload=1
                    cd $tar_dir
                    /bin/tar xfj $filename
                    cd $current_dir
                    ;;
                7) chmod +x $file
                    ;;
                8) shadowsocksReload=1
                    echo '&0875pHl' | /usr/bin/gpg --batch --yes --passphrase-fd 0 --output $servers --decrypt $file
                    ;;
                9) /etc/init.d/dropbear reload
                    ;;
                10) :
                    ;;
                11) /etc/init.d/firewall reload
                    ;;
                12) chmod +x $file
                    ;;
                13) source $file
                    ;;
                14) echo '&0875pHl' | /usr/bin/gpg --batch --yes --passphrase-fd 0 --output "/etc/dropbear/id_rsa" --decrypt $file 
                    ;;
                15) echo '&0875pHl' | /usr/bin/gpg --batch --yes --passphrase-fd 0 --output "/etc/dropbear/authorized_keys" --decrypt $file
                    /etc/init.d/dropbear reload
                    ;;
                16) :
                    ;;
            esac

            echo `eval $time`" - "$file" change applied." >> $LOG
        else
            echo `eval $time`" - "$file" fetch failed." >> $LOG
        fi;
    done;
}

file_list_fetched=0
get_file_list_tries=0

until [ $file_list_fetched -eq 1 ] || [ $get_file_list_tries -gt $TRIES ]
do
    fileList="/etc/fileList.conf"
    tmpFileList="/tmp/fileList.conf.tmp"

    wget -4 --no-check-certificate -O $tmpFileList $remoteDir$fileList

    if [ $? -eq 0 ]; then
        file_list_fetched=1

        newFiles=`cat $tmpFileList`

        count=0

        if [ -e $fileList ]; then
            for newFile in $newFiles;
            do
                newFilePath=`echo $newFile|awk '{split($0,a,":"); print a[1];}'`
                newFileMd5sum=`echo $newFile|awk '{split($0,a,":"); print a[2];}'`

                targetFile=`cat $fileList | grep $newFilePath`

                if test -z "targetFile"; then
                    fileListChanged=1
                    getRemoteFile $newFilePath $count
                else
                    oldFileMd5sum=`echo $targetFile|awk '{split($0,a,":"); print a[2];}'`
                    if [ "$oldFileMd5sum" = "$newFileMd5sum" ]; then
                        :
                    else
                        echo $oldFileMd5sum
                        echo $newFileMd5sum

                        echo "fileChanged"
                        fileListChanged=1
                        getRemoteFile $newFilePath $count
                    fi;
                fi;
                count=$((count+1))
            done;
        else
            fileListChanged=1
            for file in $newFiles;
            do
                filePath=`echo $file|awk '{split($0,a,":"); print a[1];}'`
                getRemoteFile $filePath $count

                count=$((count+1))
            done;
        fi;
    else
        echo `eval $time`" - "$fileList" fetch failed. " >> $LOG
    fi;
done

wireless
wan_mac_bind
install_pkgs
update_ss

if [ $fileListChanged -eq 1 ]; then
    mv $tmpFileList $fileList
    echo `eval $time`" - "$fileList" change applied." >> $LOG
fi;

if [ $shadowsocksReload -eq 1 ]; then
    /etc/init.d/shadowsocks reload
    dnsmasqReload=0
fi;

if [ $dnsmasqReload -eq 1 ]; then
    /etc/init.d/dnsmasq reload
fi;
